<html>
	<head>
	<link rel="stylesheet" type="text/css" href="/style.css">
	</head>
	<body><script language="javascript">
		if ((window.name != "content") && (navigator.userAgent.indexOf("Opera") <= -1) )
		document.write("<center><a href='../../index.html?page=LuaAPI/Classes/AbilityBook.htm'>show framing</a></center>")
		</script>
	<h1>
		AbilityBook	</h1>
<h3>Description</h3>
<p>A library that contains a large number of functions that are centered around the Limited Action Set.</p>
<a name="Enums"/><hr><a name="CodeEnumAMPRespecType"><h3>Enum</h3><br><h2>CodeEnumAMPRespecType</h2>
<ul>
<li><b>Full</b>
<li><b>Section</b>
<li><b>Single</b>
</ul>
<hr><a name="CodeEnumEldanAvailability"><h3>Enum</h3><br><h2>CodeEnumEldanAvailability</h2>
<h3>Description</h3>
<p>This enum rempresents the AMP's current state.<br>
<br>
Unavailable - The player has not unlocked the AMP<br>
Inaccessible - The player has not unlocked that AMP's tier<br>
Inactivated - The player has not spent points to activate this AMP<br>
Activated - The player has spent points to activate this AMP</p>
<ul>
<li><b>Unavailable</b>
<li><b>Inaccessible</b>
<li><b>Inactivated</b>
<li><b>Activated</b>
</ul>
<hr><a name="CodeEnumSpecConstant"><h3>Enum</h3><br><h2>CodeEnumSpecConstant</h2>
<h3>Description</h3>
<p>This is a single value representing the maximum number of specs the player can have.</p>
<ul>
<li><b>MaxNumSpecs</b>
</ul>
<hr><a name="CodeEnumSpecError"><h3>Enum</h3><br><h2>CodeEnumSpecError</h2>
<h3>Description</h3>
<p>Error messages that the player can receive when attempting to save their spec.  Ok is the success case.</p>
<ul>
<li><b>Ok</b>
<li><b>InvalidIndex</b>
<li><b>NoChange</b>
<li><b>InCombat</b>
<li><b>InvalidPlayer</b>
<li><b>IndexLocked</b>
<li><b>PvPRestricted</b>
<li><b>InVoid</b>
</ul>
<a name=">Functions"/>
<hr><a name="ActivateSpell"><h3>Function</h3><br><h2>ActivateSpell(idSpell, bActive)</h2>
<h3>Description</h3>
<p>Sets the spell's activated state.  Spells are considered activated when they are able to be added to the player's limited action set.</p>
<h3>Params</h3>
<ul>
<li><b>idSpell</b><b> (Integer)</b> - The id for the ability being activated
<li><b>bActive</b><b> (Boolean)</b> - Whether the spell should be made active or inactive.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Returns a boolean stating whether or not the spell was successfully activated.
</ul>
<hr><a name="ClearCachedEldanAugmentationSpec"><h3>Function</h3><br><h2>ClearCachedEldanAugmentationSpec()</h2>
<h3>Description</h3>
<p>Removes any changes that were made to players AMPs but were not saved.</p>
<hr><a name="ClearCachedLASUpdates"><h3>Function</h3><br><h2>ClearCachedLASUpdates()</h2>
<h3>Description</h3>
<p>Clears any unsaved changes to the player's limited action set.</p>
<hr><a name="CommitEldanAugmentationSpec"><h3>Function</h3><br><h2>CommitEldanAugmentationSpec()</h2>
<h3>Description</h3>
<p>Submits the currently selected AMPs so they are saved to the player's current spec.</p>
<hr><a name="GetAbilitiesList"><h3>Function</h3><br><h2>GetAbilitiesList(eSpellType)</h2>
<h3>Description</h3>
<p>Returns a table with information on each of the character's abilities.</p>
<h3>Params</h3>
<ul>
<li><b>eSpellType</b><b> (Spell.CodeEnumSpellTag)</b> - A number representing the spell's type.  Non-Combat abilities have either the Mount, Misc, or Path tags.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Array of Table</b> - An array of tables that contain information on each spell that the player has access to.
<ul>
<li><b>nId</b><b> (Integer)</b> - The id number of the base spell.
<li><b>strName</b><b> (String)</b> - The spell's name.
<li><b>nMaxTiers</b><b> (Integer)</b> - The maximum number of tiers that the spell has.
<li><b>bIsActive</b><b> (Boolean)</b> - Determines whether the ability is unlocked or not.
<li><b>nCurrentTier</b><b> (Integer)</b> - The current tier set for the spell.
<li><b>strAbilityDescription</b><b> (String)</b> - The description of the spell that is listed in the tooltip.
<li><b>strAbilityPerTierPointDescription</b><b> (String)</b> - A listing of what is added to the spell after each tier upgrade.  This does not include the Tier 4 and Tier 8 bonuses.
<li><b>tTiers</b><b> (Array of Table)</b> - An array of tables that contain information for each tier of the spell.  The contents of this table differ depending on whether the spell is a combat or non-combat spell, or if the spell summons a mount.
<ul>
<li><b>strName</b><b> (String)</b> - The name of the spell.
<li><b>nId</b><b> (Integer)</b> - The id number of the base spell.
<li><b>nTier</b><b> (Integer)</b> - The tier that is listed in this table.
<li><b>nTrainingCost</b><b> (Integer)</b> - The number of credits required to unlock the base spell.
<li><b>nTierPointCost</b><b> (Integer)</b> - The number of Ability Points required to upgrade to this tier.
<li><b>bCanPurchase</b><b> (Boolean)</b> - Whether or not the player meets the requirements to unlock the spell.
<li><b>bAmpUnlocked</b><b> (Boolean)</b> - Whether the spell requires an AMP to be active before it can be unlocked.  This variable is only used for Combat spells.
<li><b>nLevelReq</b><b> (Integer)</b> - The level required to unlock this spell's tier.
<li><b>bIsActive</b><b> (Boolean)</b> - Whether the player is using this tier of the spell.
<li><b>strTierBonusDescription</b><b> (String)</b> - The tier bonus that the player gets at this tier.
<li><b>splObject</b><b> (<a href="../classes/spell.htm">Spell</a>)</b> - The spell for this tier.
<li><b>nTierSpellId</b><b> (Integer)</b> - The id number for the spell at this tier.  This variable is only used for non-combat spells.
<li><b>nPreviewCreatureId</b><b> (Integer)</b> - The id number of the creature spawned when using this ability.  This is primarily used for preview purposes and only exists for Mount type spells.
<li><b>nPreviewHoverboardItemDisplay</b><b> (Integer)</b> - The id number of the hoverboard.  This is primarily used for preview purposes and is only set if the spell is a mount.
<li><b>bIsHoverboard</b><b> (Boolean)</b> - Specifies whether the spell is for a hoverboard or another type of mount.  This variable is only set if the spell summons a mount.
</ul>
</ul>
</ul>
<hr><a name="GetAbilityInfo"><h3>Function</h3><br><h2>GetAbilityInfo(idSpell, eSpellType)</h2>
<h3>Description</h3>
<p>Gives the UI  information on a specific spell.</p>
<h3>Params</h3>
<ul>
<li><b>idSpell</b><b> (Integer)</b> - The id number of the spell that is being queried.
<li><b>eSpellType</b><b> (Spell.CodeEnumSpellTag)</b> - The type of spell being queried.  This should match up with the type of spell that was used in the first argument.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Table</b> - A table that contains information on the spell
<ul>
<li><b>nId</b><b> (Integer)</b> - The id number of the base level of the spell.
<li><b>strName</b><b> (String)</b> - The name of the spell.
<li><b>nMaxTiers</b><b> (Integer)</b> - The maximum number of tiers allowed for the spell.
<li><b>bIsActive</b><b> (Boolean)</b> - Whether the spell has been purchased or not.
<li><b>nCurrentTier</b><b> (Integer)</b> - The tier that the spell is currently set to.
<li><b>strAbilityDescription</b><b> (String)</b> - The description of the ability, as shown in the tooltip.
<li><b>strAbilityPerTierPointDescription</b><b> (String)</b> - The description of the spell.
<li><b>tTiers</b><b> (Array of Table)</b> - Information on each tier of the spell.
<ul>
<li><b>strName</b><b> (String)</b> - The name of the spell.
<li><b>nId</b><b> (Integer)</b> - The id number of the base spell.
<li><b>nTier</b><b> (Integer)</b> - The tier that is referenced in this table.
<li><b>nTrainingCost</b><b> (Integer)</b> - The amount of currency needed to train this spell.  This value is usually only set for the base level of the spell.
<li><b>nTierPointCost</b><b> (Integer)</b> - The number of Ability Points that the player must use to unlock this tier.
<li><b>bCanPurchase</b><b> (Boolean)</b> - Determines whether the player meets the requirement to purchase this tier of the ability.
<li><b>bAmpUnlocked</b><b> (Boolean)</b> - Determines whether the spell is unlocked via an AMP or not.
<li><b>nLevelReq</b><b> (Integer)</b> - The level the player must reach before using this tier of the spell.
<li><b>bIsActive</b><b> (Boolean)</b> - Whether the player is using this tier or not.
<li><b>strTierBonusDescription</b><b> (String)</b> - The description of the spell at this tier.
<li><b>splObject</b><b> (<a href="../classes/spell.htm">Spell</a>)</b> - The spell at this tier.
<li><b>nTierSpellId</b><b> (Integer)</b> - The id number of the spell.  This only exists for non - combat spells.
<li><b>nPreviewCreatureId</b><b> (Integer)</b> - The id number of the mount that can be previewed from this spell.  This variable only exists if the spell type is Mount.
<li><b>nPreviewHoverboardItemDisplay</b><b> (Integer)</b> - The id of the hoverboard that should be displayed in the mount preview.  This value is only valid if the spell type was set to Mount and the mount happens to be a Hoverboard.
<li><b>bIsHoverboard</b><b> (Boolean)</b> - Determines whether the mount is a hoverboard or not.  This is only set if the Mount tag was passed in.
</ul>
</ul>
</ul>
<hr><a name="GetAvailableLockedInPower"><h3>Function</h3><br><h2>GetAvailableLockedInPower()</h2>
<h3>Description</h3>
<p>Gets the amount of unused AMP power the player has left in their current saved spec.  This value does not account for any changes that the player has made that have not been saved.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The amount of unused AMP power in the current spec.
</ul>
<hr><a name="GetAvailablePower"><h3>Function</h3><br><h2>GetAvailablePower()</h2>
<h3>Description</h3>
<p>Gets the amount of AMP power the player has left.  This value accounts for any changes that have not been saved.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The number of AMP points the player has not spent.
</ul>
<hr><a name="GetCurrentSpec"><h3>Function</h3><br><h2>GetCurrentSpec()</h2>
<h3>Description</h3>
<p>Gets the number of the Action Set that the player is currently using.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The number of the Action Set that the player is currently using.
</ul>
<hr><a name="GetEldanAugmentationData"><h3>Function</h3><br><h2>GetEldanAugmentationData(nSpecIndex)</h2>
<h3>Description</h3>
<p>Gets information for each AMP for the player's class.</p>
<h3>Params</h3>
<ul>
<li><b>nSpecIndex</b><b> (Integer)</b> - The index of the Action Set that the function should return the AMP data for.  If this value is not valid, the function will return False.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Array of Table</b> - The information for each category and each AMP.
<ul>
<li><b>tCategories</b><b> (Array of Table)</b> - The information for each category.
<ul>
<li><b>nId</b><b> (Integer)</b> - The id number for the AMP category.  The categories (in order) are:<br>
<br>
Damage/Support<br>
Support<br>
Support/Utility<br>
Utility<br>
Damage/Utility<br>
Damage
<li><b>strName</b><b> (String)</b> - The localized name of the category.
<li><b>fPowerInCategory</b><b> (Float)</b> - The amount of AMP power the player has used on the category.
<li><b>nHighestTierUnlocked</b><b> (Integer)</b> - The highest tier that the player can access in the category.  This value ranges from 1-3.
<li><b>nCategoriesToUnlock</b><b> (Integer)</b> - The number of categories that can help unlock this category.
<li><b>tUnlockedCategories</b><b> (Array of Table)</b> - Information on the categories that help unlock this category.  The number of entries should match nCategoriesToUnlock.
<ul>
<li><b>nUnlockCategoryId</b><b> (Integer)</b> - The id number of the category that helps unlock this one.
<li><b>nTier2Amount</b><b> (Integer)</b> - The amount of power that is needed in this category for the category in the parent table to increase to tier 2.
<li><b>nTier3Amount</b><b> (Integer)</b> - The amount of power that is needed in this category for the category in the parent table to increase to tier 3.
</ul>
</ul>
<li><b>tAugments</b><b> (Array of Table)</b> - The information for each AMP.
<ul>
<li><b>nId</b><b> (Integer)</b> - The id number for the AMP.
<li><b>eEldanAvailability</b><b> (AbilityBook.CodeEnumEldanAvailability)</b> - The current state of the AMP.
<li><b>nPowerCost</b><b> (Integer)</b> - The amount of AMP power required to activate the AMP.
<li><b>nItemIdUnlock</b><b> (Integer)</b> - The item id for the for the item that unlocks the AMP.
<li><b>bUnlocked</b><b> (Boolean)</b> - Whether the item is unlocked or not.
<li><b>nEldanAugmentationIdRequired</b><b> (Integer)</b> - The id number of the AMP the player has to activate before this one unlocks.
<li><b>bRequiredOkay</b><b> (Boolean)</b> - Whether the required AMPs have been activated or not.
<li><b>nDisplayRow</b><b> (Integer)</b> - The row that the AMP is drawn on.
<li><b>nDisplayColumn</b><b> (Integer)</b> - The column that the AMP is drawn on.
<li><b>nCategoryId</b><b> (Integer)</b> - The id number of the category that the AMP belongs to.
<li><b>nCategoryTier</b><b> (Integer)</b> - The tier that the AMP is in.
<li><b>nSpellIdAugment</b><b> (Integer)</b> - The id number of the spell that unlocks when the AMP is learned.
<li><b>strTitle</b><b> (String)</b> - The name of the AMP.
<li><b>strDescription</b><b> (String)</b> - The description of what the AMP does.
</ul>
</ul>
</ul>
<hr><a name="GetEldanAugmentationResetData"><h3>Function</h3><br><h2>GetEldanAugmentationResetData()</h2>
<h3>Return Value</h3>
<ul>
<li><b>Table</b>
<ul>
<li><b>nCount</b><b> (Integer)</b> - The number of results possible when the player resets their AMPs.
<li><b>nSpecIndex</b><b> (Integer)</b> - The spec that was affected most.
<li><b>eLimitedActionSetReslut</b><b> (Integer)</b> - The result that the SpecIndex is tied to.
</ul>
</ul>
<hr><a name="GetEldanAugmentationRespecCost"><h3>Function</h3><br><h2>GetEldanAugmentationRespecCost()</h2>
<h3>Description</h3>
<p>Gets the cost to respec the character's AMPs, in copper.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The number of credits required to reset the character's AMPs, in copper.
</ul>
<hr><a name="GetNumUnlockedSpecs"><h3>Function</h3><br><h2>GetNumUnlockedSpecs()</h2>
<h3>Description</h3>
<p>Gets the number of Action Sets the current player has unlocked.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The number of Action Sets the player has unlocked.
</ul>
<hr><a name="GetSpellTierLevelRequirements"><h3>Function</h3><br><h2>GetSpellTierLevelRequirements()</h2>
<h3>Description</h3>
<p>Gets the level requirememts for the player to learn each spell tier.</p>
<h3>Return Value</h3>
<ul>
<li><b>Array of Integer</b> - The level the character has to be in order to unlock each tier of a spell.  Index 1 is the base spell, while 2 is Tier 1, etc.
</ul>
<hr><a name="GetTagsForSpell"><h3>Function</h3><br><h2>GetTagsForSpell(idSpell)</h2>
<h3>Description</h3>
<p>Gets the category that the spell belongs to.</p>
<h3>Params</h3>
<ul>
<li><b>idSpell</b><b> (Integer)</b> - The id number for the spell that is being checked.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Array of String</b> - An array of strings that contain the names of the categories that the spell belongs to.
</ul>
<hr><a name="GetTotalPower"><h3>Function</h3><br><h2>GetTotalPower()</h2>
<h3>Description</h3>
<p>Gets the total amount of AMP points availalble to the player.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The total number of AMP points the player has.
</ul>
<hr><a name="IsLASChangeActive"><h3>Function</h3><br><h2>IsLASChangeActive()</h2>
<h3>Description</h3>
<p>Checks to make sure that the Change Spec ability is active.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Informs the UI whether the Limited Action Set can be chaged.
</ul>
<hr><a name="NextSpec"><h3>Function</h3><br><h2>NextSpec()</h2>
<h3>Description</h3>
<p>Cycles to the next Action Set available to the player.  If the player is already at their latest action set, it cycles to the first Action Set.</p>
<hr><a name="PrevSpec"><h3>Function</h3><br><h2>PrevSpec()</h2>
<h3>Description</h3>
<p>Cycles back to an earlier Action Set.  If the player is already at their first Action Set, it cycles to the last one.</p>
<hr><a name="RespecEldanAugmentations"><h3>Function</h3><br><h2>RespecEldanAugmentations()</h2>
<h3>Description</h3>
<p>Attempts to reset the player's AMPs for their current spec.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Whether the reset was successful or not.
</ul>
<hr><a name="SetCurrentSpec"><h3>Function</h3><br><h2>SetCurrentSpec(nSpecNumber)</h2>
<h3>Description</h3>
<p>Selects a specific Action Set for the player.</p>
<h3>Params</h3>
<ul>
<li><b>nSpecNumber</b><b> (Integer)</b> - The Action Set that the player will switch to.
</ul>
<hr><a name="UpdateEldanAugmentationSpec"><h3>Function</h3><br><h2>UpdateEldanAugmentationSpec(nSpecIdx, nActivatedAmps, tUnlockedAmps)</h2>
<h3>Description</h3>
<p>Saves the AMPs in the Action Set that the player has been working in.</p>
<h3>Params</h3>
<ul>
<li><b>nSpecIdx</b><b> (Integer)</b> - The Action Set number that is being updated.
<li><b>nActivatedAmps</b><b> (Integer)</b> - The number of activated AMPs in the Action Set.
<li><b>tUnlockedAmps</b><b> (Table)</b> - A table with a list of activated AMP ids, indexed by those ids.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Whether the operation was successful or not.
</ul>
<hr><a name="UpdateSpellTier"><h3>Function</h3><br><h2>UpdateSpellTier(idBaseSpell, nTier)</h2>
<h3>Description</h3>
<p>Sets the spell to the specified tier in the cached copy of the Action Set.  This is not the saved copy, so any changes that are not saved are not permenantly set.</p>
<h3>Params</h3>
<ul>
<li><b>idBaseSpell</b><b> (Integer)</b> - The id number for the base spell.
<li><b>nTier</b><b> (Integer)</b> - The tier that the spell is being set to.
</ul>
<hr><a name="ValidateEldanAugmentationSpec"><h3>Function</h3><br><h2>ValidateEldanAugmentationSpec(nSpecIdx, nUnlockedAmps, tUnlockedAMPIds) (Deprecated)</h2>
<h3>Description</h3>
<p>Checks to make sure that the specified action set is valid and ready to be updated.</p>
<h3>Params</h3>
<ul>
<li><b>nSpecIdx</b><b> (Integer)</b> - The Action Set that the function is trying to save.
<li><b>nUnlockedAmps</b><b> (Integer)</b> - The number of AMPS that the player has activated.
<li><b>tUnlockedAMPIds</b><b> (Table)</b> - A table that contains the id numbers of every AMP that the player has activated.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>ActionSetLib.CodeEnumLimitedActionSetResult</b> - The result of the operation
</ul>
	</body>
</html>
