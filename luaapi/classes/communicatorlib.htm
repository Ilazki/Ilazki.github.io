<html>
	<head>
	<link rel="stylesheet" type="text/css" href="/style.css">
	</head>
	<body><script language="javascript">
		if ((window.name != "content") && (navigator.userAgent.indexOf("Opera") <= -1) )
		document.write("<center><a href='../../index.html?page=LuaAPI/Classes/CommunicatorLib.htm'>show framing</a></center>")
		</script>
	<h1>
		CommunicatorLib	</h1>
<h3>Description</h3>
<p>A library that provides addons a way to manipulate communicator messages sent by NPCs.</p>
<a name="Events"/><hr><a name="Communicator_EndIncoming"><h3>Event</h3><br><h2>Communicator_EndIncoming</h2>
<h3>Description</h3>
<p>Fires when an incoming communicator times out and becomes a "missed call"</p>
<hr><a name="Communicator_ShowQuestMsg"><h3>Event</h3><br><h2>Communicator_ShowQuestMsg</h2>
<h3>Params</h3>
<ul>
<li><b>idMsg</b><b> (Integer)</b> - The id number for the message.
<li><b>idCreature</b><b> (Integer)</b> - The id number for the NPC that sent the communicator message.
<li><b>queShown</b><b> (<a href="../classes/quest.htm">Quest</a>)</b> - The quest that the message will offer the player.
<li><b>strText</b><b> (String)</b> - The quest text that the message will show.
</ul>
<hr><a name="Communicator_ShowSpamMsg"><h3>Event</h3><br><h2>Communicator_ShowSpamMsg</h2>
<h3>Description</h3>
<p>Fires if a communicator message is sent to the player but does not have a valid Quest tied to it.</p>
<h3>Params</h3>
<ul>
<li><b>idMsg</b><b> (Integer)</b> - The id number of the communicator message.
<li><b>idCreature</b><b> (Integer)</b> - The id number of the creature that sent the message.
<li><b>strText</b><b> (String)</b> - The text that should be shown in the message.
<li><b>bPriorty</b><b> (Boolean)</b> - Whether the message should have priority over other messages.
</ul>
<hr><a name="Communicator_SpamVOEnded"><h3>Event</h3><br><h2>Communicator_SpamVOEnded</h2>
<h3>Description</h3>
<p>Fires when a communicator's voice over ends.</p>
<hr><a name="Communicator_UpdateCallback"><h3>Event</h3><br><h2>Communicator_UpdateCallback</h2>
<h3>Description</h3>
<p>Fires whenever a communicator message gets updated in response to a player abandoning, botching, or completing a quest.</p>
<h3>Params</h3>
<ul>
<li><b>bHasCallback</b><b> (Boolean)</b> - Whether the player gets an immediate communicator message or not.
<li><b>bRedeemsQuest</b><b> (Boolean)</b> - Whether the callback allows the player to turn in a quest or not.
</ul>
<a name=">Functions"/>
<hr><a name="CallbackLastContact"><h3>Function</h3><br><h2>CallbackLastContact()</h2>
<h3>Description</h3>
<p>Begin a communicator message with the NPC that sent the most recent message.</p>
<hr><a name="CallContact"><h3>Function</h3><br><h2>CallContact(queCalling)</h2>
<h3>Description</h3>
<p>Begin the communicator message with the NPC associated with the specified quest.</p>
<h3>Params</h3>
<ul>
<li><b>queCalling</b><b> (<a href="../classes/quest.htm">Quest</a>)</b> - The quest that the player is trying to accept or turn in via the communicator.
</ul>
<hr><a name="Close"><h3>Function</h3><br><h2>Close()</h2>
<h3>Description</h3>
<p>Closes the communicator message that is currently open.</p>
<hr><a name="CommunicatorBackground_TheEntity"><h3>Function</h3><br><h2>CommunicatorBackground_TheEntity() (Deprecated)</h2>
<hr><a name="GetMessageLayoutForQuest"><h3>Function</h3><br><h2>GetMessageLayoutForQuest(queSource)</h2>
<h3>Description</h3>
<p>Gets information regarding the layout of the portrait portion of a communicator message that is tied to a quest.</p>
<h3>Params</h3>
<ul>
<li><b>queSource</b><b> (<a href="../classes/quest.htm">Quest</a>)</b> - The quest that the communicator message is tied to.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Table</b>
<ul>
<li><b>ePortraitPlacement</b><b> (Integer)</b> - The location on the window that the portrait is assigned to.  This value lines up with the CommunicatorLib.CommunicatorPortraitPlacement set of constants.
<li><b>eOverlay</b><b> (Integer)</b> - The static overlay that should be placed over the portrait.  This lines up with the CommunicatorLib.CommunicatorOverlay set of constants.
<li><b>eBackground</b><b> (Integer)</b> - The background that should be used with the portrait.  This value lines up with the CommunicatorLib.CommunicatorBackground set of constants.
</ul>
</ul>
<hr><a name="GetMessageLayoutForSpam"><h3>Function</h3><br><h2>GetMessageLayoutForSpam(idMessage)</h2>
<h3>Description</h3>
<p>Gets information regarding how the background on a spam message should be layed out.</p>
<h3>Params</h3>
<ul>
<li><b>idMessage</b><b> (Integer)</b> - The id number for the spam message being queried.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Table</b>
<ul>
<li><b>fDuration</b><b> (Float)</b> - How long the message will remain on the screen, in seconds.
<li><b>ePortraitPlacement</b><b> (Integer)</b> - Where the character portrait should appear on the communicator window.  This value corresponds with the CommunicatorLib.CommunicatorPortraitPlacement set of constants.
<li><b>eOverlay</b><b> (Integer)</b> - Indicated which overlay should be drawn over the portrait.  This value corresponds with the CommunicatorLib.CommunicatorOverlay set of constants.
<li><b>eBackground</b><b> (Integer)</b> - Indicated which background should be used with the portrait.  This value corresponds with the CommunicatorLib.CommunicatorBackground set of constants.
</ul>
</ul>
<hr><a name="GetPathMissionDelivered"><h3>Function</h3><br><h2>GetPathMissionDelivered(idMessage)</h2>
<h3>Description</h3>
<p>Gets the Path Mission that the player unlocks via the communicator message.</p>
<h3>Params</h3>
<ul>
<li><b>idMessage</b><b> (Integer)</b> - The id number for the communicator message.
</ul>
<h3>Return Value</h3>
<ul>
<li><b><a href="../classes/pathmission.htm">PathMission</a></b> - The Path Mission that is unlocked for the player via the communicator message with the specified id.
</ul>
<hr><a name="IgnoreCallback"><h3>Function</h3><br><h2>IgnoreCallback()</h2>
<h3>Description</h3>
<p>Cancel an incoming communicator message.</p>
<hr><a name="IsVisible"><h3>Function</h3><br><h2>IsVisible()</h2>
<h3>Description</h3>
<p>Determines whether or not a communicator message is currently being displayed.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - If the communicator message is being displayed, this value will be true.
</ul>
<hr><a name="PlaySpamVo"><h3>Function</h3><br><h2>PlaySpamVo(idMessage)</h2>
<h3>Description</h3>
<p>Plays the voice over for the specified communicator message.</p>
<h3>Params</h3>
<ul>
<li><b>idMessage</b><b> (Integer)</b> - The id number for the communicator message that should play its Voice Over.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Whether there was actually a voice over to play or not.
</ul>
<hr><a name="QueueMessage"><h3>Function</h3><br><h2>QueueMessage()</h2>
<hr><a name="QueueNextCall"><h3>Function</h3><br><h2>QueueNextCall(idMessage)</h2>
<h3>Description</h3>
<p>Add the specified message to the message queue.</p>
<h3>Params</h3>
<ul>
<li><b>idMessage</b><b> (Integer)</b> - The id number of the message that will be thrown on the queue.
</ul>
	</body>
</html>
